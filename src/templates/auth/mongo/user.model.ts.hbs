import { Schema, Types, model } from "mongoose";
import bcrypt from "bcryptjs";

export interface IUser {
    _id: Types.ObjectId | string;
    name: string;
    email: string;
    password: string;
    createdOn: Date;
    updatedOn: Date;
}

const userSchema = new Schema<IUser>({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    createdOn: { type: Date },
    updatedOn: { type: Date }
});

userSchema.pre("save", async function(next) {
    if(this.isNew) {
        this._id = undefined as any;
        
        // Hashing the password
        this.password = await bcrypt.hash(this.password, 14);

        this.createdOn = new Date();
        this.updatedOn = new Date();
    }
    next();
});

const UserModel = model("User", userSchema);
export default UserModel;