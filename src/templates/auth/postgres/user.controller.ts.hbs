import type { Request, Response } from "express";
import ApiResponse from "../../utils/api_response.util.js";
import UserModel, { type IUser } from "../../models/user.model.js";
import bcrypt from "bcryptjs";
import JwtUtil from "../../utils/jwt.util.js";

export default class UserController {
    static async create(req: Request, res: Response) {
        try {
            // TODO: Use something like `zod` for validation
            const data: Partial<IUser> = req.body;
            if(!data.name || !data.email || !data.password) throw new Error("Invalid post data");
            delete data.id;
            delete data.created_on;
            delete data.updated_on;

            data.password = bcrypt.hashSync(data.password!, 14);

            const user = await UserModel.insert(data);
            if(!user) throw new Error("Unexpected error occured");

            ApiResponse.success(res, user, "user created");
        }
        catch(ex) {
            ApiResponse.failure(res, ex);
        }
    }

    static async login(req: Request, res: Response) {
        try {
            const { email, password }: {email: string, password: string} = req.body;
            
            const user = await UserModel.findOne({
                where: "email=$1",
                whereArgs: [email]
            });
            if(!user) throw new Error("User not found");

            const isPasswordCorrect = await bcrypt.compare(password, user.password);
            if(!isPasswordCorrect) throw new Error("Incorrect email or password");

            const token = JwtUtil.createToken({ userId: Number(user.id) });            
            ApiResponse.success(res, token, "logged in successfully");
        }
        catch(ex) {
            ApiResponse.failure(res, ex);
        }
    }
}